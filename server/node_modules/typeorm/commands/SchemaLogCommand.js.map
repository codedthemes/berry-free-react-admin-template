{"version":3,"sources":["../../src/commands/SchemaLogCommand.ts"],"names":[],"mappings":";;;;AACA,iDAAyC;AAEzC,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AACvB,8DAA6B;AAC7B,iDAA6C;AAE7C;;GAEG;AACH,MAAa,gBAAgB;IAA7B;QACI,YAAO,GAAG,YAAY,CAAA;QACtB,aAAQ,GACJ,sGAAsG;YACtG,+DAA+D,CAAA;IAgFvE,CAAC;IA9EG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YAC7B,KAAK,EAAE,GAAG;YACV,QAAQ,EACJ,6DAA6D;YACjE,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI,UAAU,GAA2B,SAAS,CAAA;QAClD,IAAI;YACA,UAAU,GAAG,MAAM,2BAAY,CAAC,cAAc,CAC1C,cAAI,CAAC,OAAO,CAAC,iBAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,UAAoB,CAAC,CACzD,CAAA;YACD,UAAU,CAAC,UAAU,CAAC;gBAClB,WAAW,EAAE,KAAK;gBAClB,aAAa,EAAE,KAAK;gBACpB,UAAU,EAAE,KAAK;gBACjB,OAAO,EAAE,KAAK;aACjB,CAAC,CAAA;YACF,MAAM,UAAU,CAAC,UAAU,EAAE,CAAA;YAE7B,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,MAAM;iBACtC,mBAAmB,EAAE;iBACrB,GAAG,EAAE,CAAA;YAEV,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACpC,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,MAAM,CACR,4FAA4F,CAC/F,CACJ,CAAA;aACJ;iBAAM;gBACH,MAAM,gBAAgB,GAAG,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC;qBACxD,KAAK,CAAC,EAAE,CAAC;qBACT,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC;qBAClB,IAAI,CAAC,EAAE,CAAC,CAAA;gBACb,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,MAAM,CACR,iEAAiE;oBAC7D,gBAAgB,CACvB,CACJ,CAAA;gBACD,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,MAAM,CAAC,IAAI,CACb,iEAAiE,eAAK,CAAC,KAAK,CACxE,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,EAAE,CAC1C,IAAI,CACR,CACJ,CAAA;gBACD,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,MAAM,CACR,iEAAiE;oBAC7D,gBAAgB,CACvB,CACJ,CAAA;gBAED,WAAW,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;oBACtC,IAAI,SAAS,GAAG,OAAO,CAAC,KAAK,CAAA;oBAC7B,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAA;oBAC5B,SAAS;wBACL,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;4BACxB,CAAC,CAAC,SAAS;4BACX,CAAC,CAAC,SAAS,GAAG,GAAG,CAAA;oBACzB,OAAO,CAAC,GAAG,CAAC,IAAA,yBAAS,EAAC,SAAS,CAAC,CAAC,CAAA;gBACrC,CAAC,CAAC,CAAA;aACL;YACD,MAAM,UAAU,CAAC,OAAO,EAAE,CAAA;SAC7B;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,UAAU;gBACV,6BAAa,CAAC,SAAS,CACnB,sCAAsC,EACtC,GAAG,CACN,CAAA;YACL,iBAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;CACJ;AApFD,4CAoFC","file":"SchemaLogCommand.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { highlight } from \"cli-highlight\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport path from \"path\"\nimport process from \"process\"\nimport { CommandUtils } from \"./CommandUtils\"\n\n/**\n * Shows sql to be executed by schema:sync command.\n */\nexport class SchemaLogCommand implements yargs.CommandModule {\n    command = \"schema:log\"\n    describe =\n        \"Shows sql to be executed by schema:sync command. It shows sql log only for your default dataSource. \" +\n        \"To run update queries on a concrete connection use -c option.\"\n\n    builder(args: yargs.Argv) {\n        return args.option(\"dataSource\", {\n            alias: \"d\",\n            describe:\n                \"Path to the file where your DataSource instance is defined.\",\n            demandOption: true,\n        })\n    }\n\n    async handler(args: yargs.Arguments) {\n        let dataSource: DataSource | undefined = undefined\n        try {\n            dataSource = await CommandUtils.loadDataSource(\n                path.resolve(process.cwd(), args.dataSource as string),\n            )\n            dataSource.setOptions({\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false,\n            })\n            await dataSource.initialize()\n\n            const sqlInMemory = await dataSource.driver\n                .createSchemaBuilder()\n                .log()\n\n            if (sqlInMemory.upQueries.length === 0) {\n                console.log(\n                    chalk.yellow(\n                        \"Your schema is up to date - there are no queries to be executed by schema synchronization.\",\n                    ),\n                )\n            } else {\n                const lengthSeparators = String(sqlInMemory.upQueries.length)\n                    .split(\"\")\n                    .map((char) => \"-\")\n                    .join(\"\")\n                console.log(\n                    chalk.yellow(\n                        \"---------------------------------------------------------------\" +\n                            lengthSeparators,\n                    ),\n                )\n                console.log(\n                    chalk.yellow.bold(\n                        `-- Schema synchronization will execute following sql queries (${chalk.white(\n                            sqlInMemory.upQueries.length.toString(),\n                        )}):`,\n                    ),\n                )\n                console.log(\n                    chalk.yellow(\n                        \"---------------------------------------------------------------\" +\n                            lengthSeparators,\n                    ),\n                )\n\n                sqlInMemory.upQueries.forEach((upQuery) => {\n                    let sqlString = upQuery.query\n                    sqlString = sqlString.trim()\n                    sqlString =\n                        sqlString.substr(-1) === \";\"\n                            ? sqlString\n                            : sqlString + \";\"\n                    console.log(highlight(sqlString))\n                })\n            }\n            await dataSource.destroy()\n        } catch (err) {\n            if (dataSource)\n                PlatformTools.logCmdErr(\n                    \"Error during schema synchronization:\",\n                    err,\n                )\n            process.exit(1)\n        }\n    }\n}\n"],"sourceRoot":".."}