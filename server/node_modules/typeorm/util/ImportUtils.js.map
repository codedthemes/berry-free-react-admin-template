{"version":3,"sources":["../../src/util/ImportUtils.ts"],"names":[],"mappings":";;;;AAAA,oDAAmB;AACnB,wDAAuB;AACvB,6BAAmC;AAE5B,KAAK,UAAU,mBAAmB,CACrC,QAAgB;IAEhB,MAAM,WAAW,GAAG,KAAK,IAA2B,EAAE;QAClD,qFAAqF;QACrF,oDAAoD;QACpD,OAAO;YACH,MAAM,QAAQ,CAAC,qCAAqC,CAAC,EAAE,CACnD,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;gBAC1B,CAAC,CAAC,QAAQ;gBACV,CAAC,CAAC,IAAA,mBAAa,EAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAC3C;YACD,KAAK;SACR,CAAA;IACL,CAAC,CAAA;IACD,MAAM,YAAY,GAAG,KAAK,IAAgC,EAAE;QACxD,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,UAAU,CAAC,CAAA;IAC1C,CAAC,CAAA;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC,CAAA;IAE5E,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;QAAE,OAAO,WAAW,EAAE,CAAA;SAC/D,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,KAAK;QAAE,OAAO,YAAY,EAAE,CAAA;SACrE,IAAI,SAAS,KAAK,IAAI,IAAI,SAAS,KAAK,IAAI,EAAE;QAC/C,MAAM,WAAW,GAAG,MAAM,qBAAqB,CAAC,QAAQ,CAAC,CAAA;QAEzD,IAAI,WAAW,IAAI,IAAI,EAAE;YACrB,MAAM,QAAQ,GAAG,CAAC,WAAmB,aAAnB,WAAW,uBAAX,WAAW,CAAU,IAAI,MAAK,QAAQ,CAAA;YAExD,IAAI,QAAQ;gBAAE,OAAO,WAAW,EAAE,CAAA;;gBAC7B,OAAO,YAAY,EAAE,CAAA;SAC7B;;YAAM,OAAO,YAAY,EAAE,CAAA;KAC/B;IAED,OAAO,YAAY,EAAE,CAAA;AACzB,CAAC;AAnCD,kDAmCC;AAED,SAAS,qBAAqB,CAAC,QAAgB;IAC3C,OAAO,IAAI,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QAC1B,IAAI,WAAW,GAAG,QAAQ,CAAA;QAE1B,SAAS,iBAAiB;YACtB,MAAM,QAAQ,GAAG,cAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YAE1C,IAAI,WAAW,KAAK,QAAQ;gBACxB,sCAAsC;gBACtC,MAAM,CAAC,IAAI,CAAC,CAAA;iBACX;gBACD,WAAW,GAAG,QAAQ,CAAA;gBACtB,MAAM,oBAAoB,GAAG,cAAI,CAAC,IAAI,CAClC,WAAW,EACX,cAAc,CACjB,CAAA;gBAED,YAAE,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE;oBACzC,IAAI,GAAG,IAAI,IAAI;wBAAE,iBAAiB,EAAE,CAAA;yBAC/B,IAAI,KAAK,CAAC,MAAM,EAAE,EAAE;wBACrB,YAAE,CAAC,QAAQ,CACP,oBAAoB,EACpB,MAAM,EACN,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;4BACV,IAAI,GAAG,IAAI,IAAI;gCAAE,MAAM,CAAC,IAAI,CAAC,CAAA;iCACxB;gCACD,IAAI;oCACA,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;iCAC3B;gCAAC,OAAO,GAAG,EAAE;oCACV,MAAM,CAAC,IAAI,CAAC,CAAA;iCACf;6BACJ;wBACL,CAAC,CACJ,CAAA;qBACJ;;wBAAM,iBAAiB,EAAE,CAAA;gBAC9B,CAAC,CAAC,CAAA;aACL;QACL,CAAC;QAED,iBAAiB,EAAE,CAAA;IACvB,CAAC,CAAC,CAAA;AACN,CAAC","file":"ImportUtils.js","sourcesContent":["import fs from \"fs\"\nimport path from \"path\"\nimport { pathToFileURL } from \"url\"\n\nexport async function importOrRequireFile(\n    filePath: string,\n): Promise<[result: any, moduleType: \"esm\" | \"commonjs\"]> {\n    const tryToImport = async (): Promise<[any, \"esm\"]> => {\n        // `Function` is required to make sure the `import` statement wil stay `import` after\n        // transpilation and won't be converted to `require`\n        return [\n            await Function(\"return filePath => import(filePath)\")()(\n                filePath.startsWith(\"file://\")\n                    ? filePath\n                    : pathToFileURL(filePath).toString(),\n            ),\n            \"esm\",\n        ]\n    }\n    const tryToRequire = async (): Promise<[any, \"commonjs\"]> => {\n        return [require(filePath), \"commonjs\"]\n    }\n\n    const extension = filePath.substring(filePath.lastIndexOf(\".\") + \".\".length)\n\n    if (extension === \"mjs\" || extension === \"mts\") return tryToImport()\n    else if (extension === \"cjs\" || extension === \"cts\") return tryToRequire()\n    else if (extension === \"js\" || extension === \"ts\") {\n        const packageJson = await getNearestPackageJson(filePath)\n\n        if (packageJson != null) {\n            const isModule = (packageJson as any)?.type === \"module\"\n\n            if (isModule) return tryToImport()\n            else return tryToRequire()\n        } else return tryToRequire()\n    }\n\n    return tryToRequire()\n}\n\nfunction getNearestPackageJson(filePath: string): Promise<object | null> {\n    return new Promise((accept) => {\n        let currentPath = filePath\n\n        function searchPackageJson() {\n            const nextPath = path.dirname(currentPath)\n\n            if (currentPath === nextPath)\n                // the top of the file tree is reached\n                accept(null)\n            else {\n                currentPath = nextPath\n                const potentialPackageJson = path.join(\n                    currentPath,\n                    \"package.json\",\n                )\n\n                fs.stat(potentialPackageJson, (err, stats) => {\n                    if (err != null) searchPackageJson()\n                    else if (stats.isFile()) {\n                        fs.readFile(\n                            potentialPackageJson,\n                            \"utf8\",\n                            (err, data) => {\n                                if (err != null) accept(null)\n                                else {\n                                    try {\n                                        accept(JSON.parse(data))\n                                    } catch (err) {\n                                        accept(null)\n                                    }\n                                }\n                            },\n                        )\n                    } else searchPackageJson()\n                })\n            }\n        }\n\n        searchPackageJson()\n    })\n}\n"],"sourceRoot":".."}