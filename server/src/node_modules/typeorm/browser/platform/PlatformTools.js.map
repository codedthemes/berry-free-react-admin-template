{"version":3,"sources":["../browser/src/platform/PlatformTools.ts"],"names":[],"mappings":"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","file":"PlatformTools.js","sourcesContent":["import * as path from \"path\"\nimport * as fs from \"fs\"\nimport dotenv from \"dotenv\"\nimport chalk from \"chalk\"\nimport { highlight, Theme } from \"cli-highlight\"\n\nexport { ReadStream } from \"fs\"\nexport { EventEmitter } from \"events\"\nexport { Readable, Writable } from \"stream\"\n\n/**\n * Platform-specific tools.\n */\nexport class PlatformTools {\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\" | \"node\" = \"node\"\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        return global\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in\n        // this is useful when we are using typeorm package globally installed and it accesses drivers\n        // that are not installed globally\n\n        try {\n            // switch case to explicit require statements for webpack compatibility.\n            switch (name) {\n                /**\n                 * spanner\n                 */\n                case \"spanner\":\n                    return require(\"@google-cloud/spanner\")\n\n                /**\n                 * mongodb\n                 */\n                case \"mongodb\":\n                    return require(\"mongodb\")\n\n                /**\n                 * hana\n                 */\n                case \"@sap/hana-client\":\n                    return require(\"@sap/hana-client\")\n\n                case \"hdb-pool\":\n                    return require(\"hdb-pool\")\n\n                /**\n                 * mysql\n                 */\n                case \"mysql\":\n                    return require(\"mysql\")\n\n                case \"mysql2\":\n                    return require(\"mysql2\")\n\n                /**\n                 * oracle\n                 */\n                case \"oracledb\":\n                    return require(\"oracledb\")\n\n                /**\n                 * postgres\n                 */\n                case \"pg\":\n                    return require(\"pg\")\n\n                case \"pg-native\":\n                    return require(\"pg-native\")\n\n                case \"pg-query-stream\":\n                    return require(\"pg-query-stream\")\n\n                case \"typeorm-aurora-data-api-driver\":\n                    return require(\"typeorm-aurora-data-api-driver\")\n\n                /**\n                 * redis\n                 */\n                case \"redis\":\n                    return require(\"redis\")\n\n                case \"ioredis\":\n                    return require(\"ioredis\")\n\n                /**\n                 * better-sqlite3\n                 */\n                case \"better-sqlite3\":\n                    return require(\"better-sqlite3\")\n\n                /**\n                 * sqlite\n                 */\n                case \"sqlite3\":\n                    return require(\"sqlite3\")\n\n                /**\n                 * sql.js\n                 */\n                case \"sql.js\":\n                    return require(\"sql.js\")\n\n                /**\n                 * sqlserver\n                 */\n                case \"mssql\":\n                    return require(\"mssql\")\n\n                /**\n                 * react-native-sqlite\n                 */\n                case \"react-native-sqlite-storage\":\n                    return require(\"react-native-sqlite-storage\")\n            }\n        } catch (err) {\n            return require(path.resolve(\n                process.cwd() + \"/node_modules/\" + name,\n            ))\n        }\n\n        // If nothing above matched and we get here, the package was not listed within PlatformTools\n        // and is an Invalid Package.  To make it explicit that this is NOT the intended use case for\n        // PlatformTools.load - it's not just a way to replace `require` all willy-nilly - let's throw\n        // an error.\n        throw new TypeError(`Invalid Package for PlatformTools.load: ${name}`)\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\" and replaces backslashes with forward slashes on Windows.\n     */\n    static pathNormalize(pathStr: string): string {\n        let normalizedPath = path.normalize(pathStr)\n        if (process.platform === \"win32\")\n            normalizedPath = normalizedPath.replace(/\\\\/g, \"/\")\n        return normalizedPath\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        return path.extname(pathStr)\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        return path.resolve(pathStr)\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        return fs.existsSync(pathStr)\n    }\n\n    static readFileSync(filename: string): Buffer {\n        return fs.readFileSync(filename)\n    }\n\n    static appendFileSync(filename: string, data: any): void {\n        fs.appendFileSync(filename, data)\n    }\n\n    static async writeFile(path: string, data: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            fs.writeFile(path, data, (err) => {\n                if (err) fail(err)\n                ok()\n            })\n        })\n    }\n\n    /**\n     * Loads a dotenv file into the environment variables.\n     *\n     * @param path The file to load as a dotenv configuration\n     */\n    static dotenv(pathStr: string): void {\n        dotenv.config({ path: pathStr })\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        return process.env[name]\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        const theme: Theme = {\n            keyword: chalk.blueBright,\n            literal: chalk.blueBright,\n            string: chalk.white,\n            type: chalk.magentaBright,\n            built_in: chalk.magentaBright,\n            comment: chalk.gray,\n        }\n        return highlight(sql, { theme: theme, language: \"sql\" })\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return highlight(json, { language: \"json\" })\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger\n     */\n    static logInfo(prefix: string, info: any) {\n        console.log(chalk.gray.underline(prefix), info)\n    }\n\n    static logError(prefix: string, error: any) {\n        console.log(chalk.underline.red(prefix), error)\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.log(chalk.underline.yellow(prefix), warning)\n    }\n\n    static log(message: string) {\n        console.log(chalk.underline(message))\n    }\n\n    static info(info: any) {\n        return chalk.gray(info)\n    }\n\n    static error(error: any) {\n        return chalk.red(error)\n    }\n\n    static warn(message: string) {\n        return chalk.yellow(message)\n    }\n\n    static logCmdErr(prefix: string, err?: any) {\n        console.log(chalk.black.bgRed(prefix))\n        if (err) console.error(err)\n    }\n}\n"],"sourceRoot":".."}