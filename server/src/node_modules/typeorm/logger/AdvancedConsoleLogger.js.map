{"version":3,"sources":["../../src/logger/AdvancedConsoleLogger.ts"],"names":[],"mappings":";;;AAAA,6DAAyD;AACzD,qDAAiD;AAIjD;;;GAGG;AACH,MAAa,qBAAsB,SAAQ,+BAAc;IACrD;;OAEG;IACO,QAAQ,CACd,KAAe,EACf,UAAqC,EACrC,WAAyB;;QAEzB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAA;QAEpD,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;YAC1B,QAAQ,MAAA,OAAO,CAAC,IAAI,mCAAI,KAAK,EAAE;gBAC3B,KAAK,KAAK,CAAC;gBACX,KAAK,cAAc,CAAC;gBACpB,KAAK,WAAW;oBACZ,6BAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;oBAC1C,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,OAAO;oBACR,IAAI,OAAO,CAAC,MAAM,EAAE;wBAChB,6BAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;qBACzD;yBAAM;wBACH,6BAAa,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAA;qBAC7C;oBACD,MAAK;gBAET,KAAK,MAAM,CAAC;gBACZ,KAAK,YAAY;oBACb,IAAI,OAAO,CAAC,MAAM,EAAE;wBAChB,6BAAa,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;qBACzD;yBAAM;wBACH,OAAO,CAAC,IAAI,CACR,6BAAa,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC9C,CAAA;qBACJ;oBACD,MAAK;gBAET,KAAK,OAAO,CAAC;gBACb,KAAK,aAAa;oBACd,IAAI,OAAO,CAAC,MAAM,EAAE;wBAChB,6BAAa,CAAC,QAAQ,CAClB,OAAO,CAAC,MAAM,EACd,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAC1B,CAAA;qBACJ;yBAAM;wBACH,OAAO,CAAC,KAAK,CACT,6BAAa,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAC/C,CAAA;qBACJ;oBACD,MAAK;aACZ;SACJ;IACL,CAAC;CACJ;AAvDD,sDAuDC","file":"AdvancedConsoleLogger.js","sourcesContent":["import { PlatformTools } from \"../platform/PlatformTools\"\nimport { AbstractLogger } from \"./AbstractLogger\"\nimport { LogLevel, LogMessage } from \"./Logger\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger extends AbstractLogger {\n    /**\n     * Write log to specific output.\n     */\n    protected writeLog(\n        level: LogLevel,\n        logMessage: LogMessage | LogMessage[],\n        queryRunner?: QueryRunner,\n    ) {\n        const messages = this.prepareLogMessages(logMessage)\n\n        for (let message of messages) {\n            switch (message.type ?? level) {\n                case \"log\":\n                case \"schema-build\":\n                case \"migration\":\n                    PlatformTools.log(String(message.message))\n                    break\n\n                case \"info\":\n                case \"query\":\n                    if (message.prefix) {\n                        PlatformTools.logInfo(message.prefix, message.message)\n                    } else {\n                        PlatformTools.log(String(message.message))\n                    }\n                    break\n\n                case \"warn\":\n                case \"query-slow\":\n                    if (message.prefix) {\n                        PlatformTools.logWarn(message.prefix, message.message)\n                    } else {\n                        console.warn(\n                            PlatformTools.warn(String(message.message)),\n                        )\n                    }\n                    break\n\n                case \"error\":\n                case \"query-error\":\n                    if (message.prefix) {\n                        PlatformTools.logError(\n                            message.prefix,\n                            String(message.message),\n                        )\n                    } else {\n                        console.error(\n                            PlatformTools.error(String(message.message)),\n                        )\n                    }\n                    break\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}